## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
num_hos <- unlist(lapply(stateSrtdValOutInt[num_hos], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[,1])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
num_hos <- unlist(lapply(stateSrtdValOutInt[num_hos], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
num_hos <- unlist(lapply(stateSrtdValOutInt[num_hos], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
num_hos <- c(1:54)
last_hos <- unlist(lapply(stateSrtdValOutInt[num_hos], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
lapply(stateSrtdValOutInt[1],nrow)
lapply(stateSrtdValOutInt[1:54],nrow)
unlist(lapply(stateSrtdValOutInt[1:54],nrow))
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
last_hos <- unlist(lapply(stateSrtdValOutInt[1:54], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[last_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
last_hos <<- unlist(lapply(stateSrtdValOutInt[1:54], nrow))
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[last_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
last_hos
lapply(stateSrtdValOutInt, function(who) who[14,])
lapply(stateSrtdValOutInt, function(who) who[[14,])
lapply(stateSrtdValOutInt, function(who) who[[14,]])
stateSrtdValOutInt[[14]]
stateSrtdValOutInt[14,]
stateSrtdValOutInt[[1]][14,]
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
last_hos <<- unlist(lapply(stateSrtdValOutInt[1:54], nrow))
combinedRank <- lapply(stateSrtdValOutInt[1:54], function(who) who[last_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
last_hos <<- unlist(lapply(stateSrtdValOutInt[1:54], nrow))
combinedRank <- lapply(stateSrtdValOutInt[[1:54]], function(who) who[last_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
tail(rankall("pneumonia", "worst"),3)
stateSrtdValOutInt[[1]][14,]
tail(rankall("heart failure"), 10)
unlist(rankall("heart failure"), 10)
rbind(rankall("heart failure"), 10)
rbind(rankall("heart failure"))
tail(rankall("heart failure"), 10)
rankall("heart failure")
rankall("heart failure")[1]
rbind(rankall("heart failure")[1])
cbind(rankall("heart failure")[1])
rbind(rankall("heart failure")[1], stringAsFactor = as.data.frame())
rbind(rankall("heart failure")[1], stringAsFactor = as.data.frame
)
as.data.frame(rankall("heart failure"))
## finds the best hospitals in specific states with repect to
## a specific disease or condition
## need plyr package
## best function will find the best hospital in a given state for a given outcome
best <- function(state, outcome) {
library(plyr)
outcomeRead(outcome)
## testing whether the state and outcome input is valid
if((state %in% rawOutcome$State) == FALSE) {
stop("invalid state")
}
else if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(state, outcome)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(state, outcome) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <- split(srtdValOutInt, srtdValOutInt$State)
stateSrtdValOutInt[[state]][1,1]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
## ranks the hospitals in a specified state with respect to a specified outcome
## need plyr package
## rankhospital function will rank the hospitals in a given state for a given outcome
rankhospital <- function(state, outcome, num) {
library(plyr)
outcomeRead(state, outcome)
## testing whether the state and outcome input is valid
if((state %in% rawOutcome$State) == FALSE) {
stop("invalid state")
}
else if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(state, outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(state, outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(state, outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <- split(srtdValOutInt, srtdValOutInt$State)
if (num == "worst") {num <- dim(stateSrtdValOutInt[[state]])[1]}
if (num == "best") {num <- 1}
stateSrtdValOutInt[[state]][num,1]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
## ranks the hospitals in with respect to a specified outcome from all states
## need plyr package
## rankall function will rank the hospitals for a given outcome in all states
rankall <- function(outcome, num = "best") {
library(plyr)
outcomeRead(outcome)
## testing whether the outcome input is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia") {
stop("invalid outcome")
}
trimData(outcome)
orderData(outcome, num)
}
## outcomeRead funciton will read in the "outcome-of-care-measures.csv"
## and trim the data as specified
outcomeRead <- function(outcome) {
rawOutcome <<- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE, na.strings = "Not Available")
}
## trimming of data for interested outcome
trimData <- function(outcome) {
listOfOutcome <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
outcomeOfInterest <- rawOutcome[,c(2,7,listOfOutcome[outcome])]
names(outcomeOfInterest) <- c("Hospital", "State", "Outcome")
validOutcomeOfInterest <<- outcomeOfInterest[complete.cases(outcomeOfInterest),]
}
## ordering the valid outcome of interest
orderData <- function(outcome, num) {
srtdValOutInt <- arrange(validOutcomeOfInterest, State, Outcome, Hospital)
stateSrtdValOutInt <<- split(srtdValOutInt, srtdValOutInt$State)
if (num == "best") {num <- 1}
combinedRank <- data.frame()
if (num == "worst") {
last_hos <<- unlist(lapply(stateSrtdValOutInt[1:54], nrow))
combinedRank <- lapply(stateSrtdValOutInt[[1:54]], function(who) who[last_hos,])
} else {
combinedRank <- lapply(stateSrtdValOutInt, function(who) who[num,])
}
combinedRank
}
r <- rankall("heart attack", 4) as.character(subset(r, state =="HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state =="HI")$hospital)
as.character(subset(r, state =="HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state =="HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, State =="HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
r
r$HI
r <- rankall("heart failure", 10)
r$NV
r <- rankall("pneumonia", 10)
r$NJ
r <- rankall("pneumonia", 20)
r$NJ
r <- rankall("pneumonia", 40)
r$NJ
r <- rankall("pneumonia", 80)
r$NJ
r <- rankall("pneumonia", 60)
r$NJ
r <- rankall("pneumonia", 65)
r$NJ
r <- rankall("pneumonia", 75)
r$NJ
r <- rankall("pneumonia", 70)
r$NJ
r <- rankall("pneumonia", 68)
r$NJ
r <- rankall("pneumonia", 67)
r$NJ
r <- rankall("pneumonia", 66)
r$NJ
r <- rankall("pneumonia", 65)
r$NJ
